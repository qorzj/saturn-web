/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/note/save": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save note
         * @description Creates or updates a note. If content_md is a single URL, it will grab the web content and generate an AI summary. Empty content deletes the note.
         */
        post: operations["postApiNoteSave"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/note/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search notes by similarity
         * @description Searches notes using vector similarity (RAG). Returns notes with cosine similarity above the threshold (default 0.65), sorted by similarity score in descending order.
         */
        get: operations["searchNotesBySimilarity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mgr/note": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all notes
         * @description Returns a paginated list of all notes, optionally filtered by slug
         */
        get: operations["getAllNotes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mgr/note/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get note by slug
         * @description Returns a single note by its slug
         */
        get: operations["getNoteBySlug"];
        put?: never;
        post?: never;
        /**
         * Delete note by slug
         * @description Permanently deletes a note
         */
        delete: operations["deleteNoteBySlug"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SaveNoteInput: {
            /**
             * @description Note identifier (lowercase letters, digits, and hyphens only)
             * @example my-note-123
             */
            slug: string;
            /**
             * @description Markdown content. If it's a single URL, web content will be grabbed and summarized.
             * @example # My Note Title
             *
             *     This is my note content in markdown.
             */
            contentMd: string;
            /**
             * @description Lock status (0: unlocked, 1: locked). Locked notes cannot be edited.
             * @example 0
             * @enum {integer}
             */
            isLocked: 0 | 1;
        };
        ListMgrNoteDto: {
            /**
             * @description Note identifier
             * @example my-note-123
             */
            slug: string;
            /**
             * @description Markdown content
             * @example # My Note
             *
             *     Content here
             */
            contentMd: string;
            /**
             * @description Note title (extracted from first H1 heading or defaults to slug)
             * @example My Note
             */
            title: string;
            /**
             * @deprecated
             * @description Rendered HTML content (deprecated - no longer used)
             * @example <h1>My Note</h1>
             *     <p>Content here</p>
             */
            contentHtml: string;
            /**
             * @description Lock status (0: unlocked, 1: locked)
             * @example 0
             * @enum {integer}
             */
            isLocked: 0 | 1;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-15T10:30:00Z
             */
            createTime: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-16T15:45:00Z
             */
            updateTime: string;
            /**
             * @description IP address of creator
             * @example 192.168.1.100
             */
            createIp: string;
            /**
             * @description IP address of last updater
             * @example 192.168.1.100
             */
            updateIp: string;
            /**
             * @description Unique visitors count
             * @example 42
             */
            uv: number;
        };
        PagedListMgrNoteDto: {
            /** @description List of notes */
            items: components["schemas"]["ListMgrNoteDto"][];
            /**
             * @description Total number of notes
             * @example 100
             */
            total: number;
            /**
             * @description Current page number (1-indexed)
             * @example 1
             */
            page: number;
            /**
             * @description Page size or 'ALL' for all items
             * @example ALL
             */
            size: string;
        };
        ListSearchNoteDto: {
            /**
             * @description Note identifier
             * @example python-async-guide
             */
            slug: string;
            /**
             * @description Note title
             * @example Python Async Programming Guide
             */
            title: string;
            /**
             * @description Markdown content
             * @example # Python Async Programming
             *
             *     This is a guide about async programming...
             */
            contentMd: string;
            /**
             * Format: float
             * @description Cosine similarity score (0-1), where 1 means identical and 0 means completely unrelated
             * @example 0.8523
             */
            similarity: number;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-15T10:30:00Z
             */
            createTime: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-16T15:45:00Z
             */
            updateTime: string;
        };
        Error: {
            /**
             * @description Error message
             * @example note is locked
             */
            error?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    postApiNoteSave: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SaveNoteInput"];
            };
        };
        responses: {
            /** @description Note saved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Note is locked or invalid slug format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    searchNotesBySimilarity: {
        parameters: {
            query: {
                /** @description Search query text */
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of similar notes (not paginated) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSearchNoteDto"][];
                };
            };
        };
    };
    getAllNotes: {
        parameters: {
            query?: {
                /** @description Filter by specific slug */
                slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of notes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagedListMgrNoteDto"];
                };
            };
        };
    };
    getNoteBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Note identifier */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Note details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListMgrNoteDto"];
                };
            };
            /** @description Note not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteNoteBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Note identifier */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Note deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
}
